#!/bin/bash

# zen-service - Management script for zen-mcp-server LaunchAgent
# Usage: zen-service [start|stop|restart|status|logs|install|uninstall]

set -e

SERVICE_NAME="com.zen-mcp-server"
LOGROTATE_SERVICE="com.zen-mcp-server.logrotate"
PLIST_FILE="$HOME/Library/LaunchAgents/$SERVICE_NAME.plist"
LOGROTATE_PLIST="$HOME/Library/LaunchAgents/$LOGROTATE_SERVICE.plist"
LOG_FILE="$HOME/.local/log/zen-mcp-server.log"
ERROR_LOG="$HOME/.local/log/zen-mcp-server.error.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[zen-service]${NC} $1"
}

success() {
    echo -e "${GREEN}✅ $1${NC}"
}

warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

error() {
    echo -e "${RED}❌ $1${NC}"
}

show_usage() {
    echo "zen-service - Manage zen-mcp-server LaunchAgent"
    echo ""
    echo "Usage: zen-service <command>"
    echo ""
    echo "Commands:"
    echo "  install   - Install and start the service (includes log rotation)"
    echo "  uninstall - Stop and remove the service"
    echo "  start     - Start the service"
    echo "  stop      - Stop the service"
    echo "  restart   - Restart the service"
    echo "  status    - Show service status and log info"
    echo "  logs      - Show recent logs"
    echo "  tail      - Tail the logs in real-time"
    echo "  rotate    - Manually rotate logs (if >10MB)"
    echo "  clear     - Clear log files"
    echo ""
}

ensure_log_dir() {
    local log_dir="$(dirname "$LOG_FILE")"
    if [[ ! -d "$log_dir" ]]; then
        mkdir -p "$log_dir"
        log "Created log directory: $log_dir"
    fi
}

install_service() {
    log "Installing zen-mcp-server LaunchAgent..."
    
    # Ensure directories exist
    ensure_log_dir
    mkdir -p "$HOME/Library/LaunchAgents"
    
    # Copy and customize main service plist file from dotfiles config
    local dotfiles_plist="$HOME/.config/LaunchAgents/$SERVICE_NAME.plist"
    if [[ -f "$dotfiles_plist" ]]; then
        # Replace placeholders with actual values
        sed -e "s|__HOME__|$HOME|g" \
            -e "s|__USER__|$(whoami)|g" \
            "$dotfiles_plist" > "$PLIST_FILE"
        success "Copied and customized LaunchAgent plist to $PLIST_FILE"
    else
        error "Plist file not found at $dotfiles_plist"
        error "Make sure your dotfiles are properly installed"
        exit 1
    fi
    
    # Copy and customize log rotation service plist file
    local logrotate_dotfiles_plist="$HOME/.config/LaunchAgents/$LOGROTATE_SERVICE.plist"
    if [[ -f "$logrotate_dotfiles_plist" ]]; then
        # Replace placeholders with actual values
        sed -e "s|__HOME__|$HOME|g" \
            -e "s|__USER__|$(whoami)|g" \
            "$logrotate_dotfiles_plist" > "$LOGROTATE_PLIST"
        success "Copied and customized log rotation plist to $LOGROTATE_PLIST"
    else
        warning "Log rotation plist not found - logs won't be automatically rotated"
    fi
    
    # Load the main service
    launchctl load "$PLIST_FILE"
    success "Loaded $SERVICE_NAME"
    
    # Load the log rotation service if available
    if [[ -f "$LOGROTATE_PLIST" ]]; then
        launchctl load "$LOGROTATE_PLIST"
        success "Loaded $LOGROTATE_SERVICE (runs daily at 2am)"
    fi
    
    # Start the main service
    launchctl start "$SERVICE_NAME"
    success "Started $SERVICE_NAME"
    
    log "Service installed and started!"
    log "Logs will be written to:"
    log "  Output: $LOG_FILE"
    log "  Errors: $ERROR_LOG"
    log "  Log rotation: Automatic (daily at 2:00 AM, max 10MB per file)"
}

uninstall_service() {
    log "Uninstalling zen-mcp-server LaunchAgent services..."
    
    # Stop the main service if running
    if launchctl list | grep -q "$SERVICE_NAME"; then
        launchctl stop "$SERVICE_NAME" 2>/dev/null || true
        log "Stopped $SERVICE_NAME"
    fi
    
    # Unload the main service
    if [[ -f "$PLIST_FILE" ]]; then
        launchctl unload "$PLIST_FILE" 2>/dev/null || true
        log "Unloaded $SERVICE_NAME"
    fi
    
    # Unload the log rotation service
    if [[ -f "$LOGROTATE_PLIST" ]]; then
        launchctl unload "$LOGROTATE_PLIST" 2>/dev/null || true
        log "Unloaded $LOGROTATE_SERVICE"
    fi
    
    # Remove plist files
    if [[ -f "$PLIST_FILE" ]]; then
        rm "$PLIST_FILE"
        success "Removed $PLIST_FILE"
    fi
    
    if [[ -f "$LOGROTATE_PLIST" ]]; then
        rm "$LOGROTATE_PLIST"
        success "Removed $LOGROTATE_PLIST"
    fi
    
    success "Services uninstalled!"
}

start_service() {
    if [[ ! -f "$PLIST_FILE" ]]; then
        error "Service not installed. Run: zen-service install"
        exit 1
    fi
    
    log "Starting $SERVICE_NAME..."
    launchctl start "$SERVICE_NAME"
    success "Started $SERVICE_NAME"
}

stop_service() {
    log "Stopping $SERVICE_NAME..."
    launchctl stop "$SERVICE_NAME" 2>/dev/null || true
    success "Stopped $SERVICE_NAME"
}

restart_service() {
    log "Restarting $SERVICE_NAME..."
    stop_service
    sleep 2
    start_service
}

show_status() {
    log "Checking zen-mcp-server services status..."
    
    # Check main service
    if [[ ! -f "$PLIST_FILE" ]]; then
        warning "Main service not installed"
        return 1
    fi
    
    if launchctl list | grep -q "$SERVICE_NAME"; then
        local pid=$(launchctl list | grep "$SERVICE_NAME" | awk '{print $1}')
        if [[ "$pid" == "-" ]]; then
            warning "Main service loaded but not running"
        else
            success "Main service running (PID: $pid)"
        fi
    else
        warning "Main service not loaded"
    fi
    
    # Check log rotation service
    if [[ -f "$LOGROTATE_PLIST" ]]; then
        if launchctl list | grep -q "$LOGROTATE_SERVICE"; then
            success "Log rotation service loaded (runs daily at 2:00 AM)"
        else
            warning "Log rotation service not loaded"
        fi
    else
        warning "Log rotation service not installed"
    fi
    
    # Show log file sizes
    if [[ -f "$LOG_FILE" ]]; then
        local log_size=$(stat -f%z "$LOG_FILE" 2>/dev/null || echo 0)
        local log_size_mb=$((log_size / 1024 / 1024))
        echo ""
        log "Log file sizes:"
        echo "  Main log: ${log_size_mb}MB ($LOG_FILE)"
        
        if [[ -f "$ERROR_LOG" ]]; then
            local error_size=$(stat -f%z "$ERROR_LOG" 2>/dev/null || echo 0)
            local error_size_mb=$((error_size / 1024 / 1024))
            echo "  Error log: ${error_size_mb}MB ($ERROR_LOG)"
        fi
    fi
    
    # Show recent log activity
    if [[ -f "$LOG_FILE" ]]; then
        echo ""
        log "Recent activity (last 5 lines):"
        tail -5 "$LOG_FILE" 2>/dev/null || echo "No logs yet"
    fi
    
    if [[ -f "$ERROR_LOG" ]] && [[ -s "$ERROR_LOG" ]]; then
        echo ""
        warning "Recent errors:"
        tail -5 "$ERROR_LOG" 2>/dev/null
    fi
}

show_logs() {
    if [[ -f "$LOG_FILE" ]]; then
        log "Recent logs from $LOG_FILE:"
        echo ""
        tail -50 "$LOG_FILE"
    else
        warning "No log file found at $LOG_FILE"
    fi
    
    if [[ -f "$ERROR_LOG" ]] && [[ -s "$ERROR_LOG" ]]; then
        echo ""
        error "Error logs from $ERROR_LOG:"
        echo ""
        tail -20 "$ERROR_LOG"
    fi
}

tail_logs() {
    ensure_log_dir
    log "Tailing logs from $LOG_FILE (press Ctrl+C to stop)..."
    echo ""
    tail -f "$LOG_FILE" 2>/dev/null &
    local tail_pid=$!
    
    # Also tail error logs if they exist
    if [[ -f "$ERROR_LOG" ]]; then
        tail -f "$ERROR_LOG" 2>/dev/null &
        local error_tail_pid=$!
    fi
    
    # Wait for interrupt
    trap "kill $tail_pid 2>/dev/null; [[ -n $error_tail_pid ]] && kill $error_tail_pid 2>/dev/null; exit 0" INT
    wait
}

rotate_logs() {
    log "Manually rotating logs..."
    if command -v zen-logrotate &> /dev/null; then
        zen-logrotate
        success "Log rotation completed"
    else
        error "zen-logrotate command not found"
        error "Make sure your dotfiles are properly linked"
        exit 1
    fi
}

clear_logs() {
    log "Clearing log files..."
    [[ -f "$LOG_FILE" ]] && > "$LOG_FILE" && success "Cleared $LOG_FILE"
    [[ -f "$ERROR_LOG" ]] && > "$ERROR_LOG" && success "Cleared $ERROR_LOG"
    log "Log files cleared"
}

# Main script logic
case "${1:-}" in
    install)
        install_service
        ;;
    uninstall)
        uninstall_service
        ;;
    start)
        start_service
        ;;
    stop)
        stop_service
        ;;
    restart)
        restart_service
        ;;
    status)
        show_status
        ;;
    logs)
        show_logs
        ;;
    tail)
        tail_logs
        ;;
    rotate)
        rotate_logs
        ;;
    clear)
        clear_logs
        ;;
    *)
        show_usage
        exit 1
        ;;
esac 